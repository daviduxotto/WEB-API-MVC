@model Entidades.eEmpleado

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "popupForm" }))
{
<h3>Información de Empleado</h3>
    <div class="container" style="margin-top: 20px">
        <div class="row">
            <div>
                <ul class="nav nav-tabs">
                    <li class="active">
                        <a href="#datosGenerales" data-toggle="tab">Datos generales</a>
                    </li>
                    <li>
                        <a href="#datosNacimiento" data-toggle="tab">Nacimiento</a>
                    </li>
                    <li>
                        <a href="#datosDireccion" data-toggle="tab">Domicilio</a>
                    </li>
                    <li>
                        <a href="#otrosDatos" data-toggle="tab">Otros datos</a>
                    </li>
                    <li>
                        <a href="#datosLaborales" data-toggle="tab">Información laboral</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="datosGenerales" class="tab-pane active">

                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.codigoCorp, new { htmlAttributes = new { @class = "hidden" } })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <br />
                                <label class="control-label col-md-2" for="primerNombre" style="text-align:right">Primer Nombre</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.primerNombre, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.primerNombre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="segundoNombre" style="text-align:right">Segundo Nombre</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.segundoNombre, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.segundoNombre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="tercerNombre" style="text-align:right">Tercer Nombre</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.tercerNombre, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="primerApellido" style="text-align:right">Primer Apellido</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.primerApellido, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.primerApellido, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="segundoApellido" style="text-align:right">Segundo Apellido</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.segundoApellido, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.segundoApellido, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="apellidoCasada" style="text-align:right">Apellido Casada</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.apellidoCasada, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.apellidoCasada, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="genero" style="text-align:right">Género</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.genero, new List<SelectListItem> { new SelectListItem { Text = "Masculino", Value = "M" }, new SelectListItem { Text = "Femenino", Value = "F" } }, htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codGeneroActual">@Model.genero</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="dpi" style="text-align:right">DPI</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.dpi, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.dpi, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="telefonoMovil" style="text-align:right">Teléfono Celular</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.telefonoMovil, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.telefonoMovil, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="telefonoCasa" style="text-align:right">Teléfono Casa</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.telefonoCasa, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>


                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="email" style="text-align:right">Email</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Correo electrónico" } })
                                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <hr class="my-4">

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="nit" style="text-align:right">NIT</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.nit, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="afiliacionIgss" style="text-align:right">Afiliación IGSS</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.afiliacionIgss, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.afiliacionIgss, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                    </div>
                    <!---FIN PESTAÑA DATOS GENERALES ---->

                    <div id="datosNacimiento" class="tab-pane">
                        <h4>Lugar y fecha de nacimiento</h4>
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codPaisNacimiento" style="text-align:right">País</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codPaisNacimiento, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codPaisNacimimientoActual">@Model.codPaisNacimiento</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codDepartamentoNacimiento" style="text-align:right">Departamento</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codDepartamentoNacimiento, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codDepartamentoNacimientoActual">@Model.codDepartamentoNacimiento</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codMunicipioNacimiento" style="text-align:right">Municipio</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codMunicipioNacimiento, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codMunicipioNacimientoActual">@Model.codMunicipioNacimiento</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="fechaNacimiento" style="text-align:right">Fecha de nacimiento</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(m => m.fechaNacimiento, new { htmlAttributes = new { @class = "form-control" }, @Value = Model.fechaNacimiento.Date.ToString("{0:dd.MM.yy}") })
                                </div>
                            </div>
                        </div>

                    </div>
                    <!---FIN PESTAÑA NACIMIENTO ---->


                    <div id="datosDireccion" class="tab-pane">
                        <h4>Dirección del empleado</h4>
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codPaisDireccion" style="text-align:right">País</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codPaisDireccion, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codPaisDireccionActual">@Model.codPaisDireccion</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codDepartamentoDireccion" style="text-align:right">Departamento</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codDepartamentoDireccion, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codDepartamentoDireccionActual">@Model.codDepartamentoDireccion</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codMunicipioDireccion" style="text-align:right">Municipio</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codMunicipioDireccion, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codMunicipioDireccionActual">@Model.codMunicipioDireccion</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="direccion" style="text-align:right">Dirección</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.direccion, new { htmlAttributes = new { @class = "form-control", @style = "text-transform: uppercase" } })
                                    @Html.ValidationMessageFor(model => model.direccion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                    </div>
                    <!---FIN PESTAÑA DIRECCION ---->

                    <div id="otrosDatos" class="tab-pane">
                        <br />
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="peso" style="text-align:right">Peso en libras</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.peso, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.peso, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="altura" style="text-align:right">Altura en centímetros</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.altura, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.altura, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="tieneEnfermedadCronica" style="text-align:right">Tiene Enfermedad crónica</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.tieneEnfermedadCronica, new List<SelectListItem> { new SelectListItem { Text = "Si", Value = "S" }, new SelectListItem { Text = "No", Value = "N" } }, htmlAttributes: new { @class = "form-control col-md-4" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="enfermedadCronica" style="text-align:right">Enfermedad crónica</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.enfermedadCronica, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.enfermedadCronica, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <!---FIN PESTAÑA OTROS DATOS ---->


                    <div id="datosLaborales" class="tab-pane">
                        <br />
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="codPuesto" style="text-align:right">Puesto</label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.codPuesto, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control col-md-4" })
                                    <label class="hidden" id="codPuestoActual">@Model.codPuesto</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2" for="salario" style="text-align:right">Salario  Ordinario Q.</label>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.salario, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.salario, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>


                    </div>

                    <!---FIN PESTAÑA DATOS LABORALES ---->

                  

                </div>
            </div>
        </div>
    </div>
}


@section scripts
{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script>
        $(document).ready(function () {

         
            // **************************** COMBOS DIRECCION NACIMIENTO *************************************//
            // ----- obtener Paises
            $.getJSON('/pais/getPaises', null, function (data) {
                $.each(data, function () {
                    $('#codPaisNacimiento').append('<option value=' +
                        this.codigo + '>' + this.descripcion + '</option>');
                    var paisNacActual = $('#codPaisNacimimientoActual').text();
                    if (paisNacActual != "") {
                        $('#codPaisNacimiento').find('option[value=' + paisNacActual + ']').attr('selected', 'selected');
                    }

                });
                // ----- obtener Departamentos
                $.getJSON('/EstadoDepartamento/getDepartamentoxPais', { codPais: $('#codPaisNacimiento').val() }, function (data) {
                    $.each(data, function () {
                        $('#codDepartamentoNacimiento').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                        var deptoNacActual = $('#codDepartamentoNacimientoActual').text();
                        if (deptoNacActual != "") {
                            $('#codDepartamentoNacimiento').find('option[value=' + deptoNacActual + ']').attr('selected', 'selected');
                        }
                    });
                    // ----- obtener municipio
                    $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisNacimiento').val(), codDepto: $('#codDepartamentoNacimiento').val() }, function (data) {
                        $.each(data, function () {
                            $('#codMunicipioNacimiento').append('<option value=' +
                                this.codigo + '>' + this.descripcion + '</option>');
                            var muniNacActual = $('#codMunicipioNacimientoActual').text();
                            if (muniNacActual != "") {
                                $('#codMunicipioNacimiento').find('option[value=' + muniNacActual + ']').attr('selected', 'selected');
                            }

                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error al obtener municipios!');
                    }); // -- fin obtener municipios
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener departamentos');
                });
            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error al obtener paises!');
            });
            // ------ fin de carga inicial ------------------------------

            // ------ obtener departamentos cuando el pais cambie
            $('#codPaisNacimiento').change(function () {
                $('#codDepartamentoNacimiento option').remove();
                $.getJSON('/EstadoDepartamento/getDepartamentoxPais', { codPais: $('#codPaisNacimiento').val() }, function (data) {
                    $.each(data, function () {
                        $('#codDepartamentoNacimiento').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                    });
                    $('#codMunicipioNacimiento option').remove();
                    // ----- obtener municipios por departamento
                    $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisNacimiento').val(), codDepto: $('#codDepartamentoNacimiento').val() }, function (data) {
                        $.each(data, function () {
                            $('#codMunicipioNacimiento').append('<option value=' +
                                this.codigo + '>' + this.descripcion + '</option>');
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error al obtener municipios!');
                    }); // -- fin obtener departamentos
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener departamentos');
                });
            });

            // ------ obtener municipio cuando el departamento cambie
            $('#codDepartamentoNacimiento').change(function () {
                $('#codMunicipioNacimiento option').remove();
                $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisNacimiento').val(), codDepto: $('#codDepartamentoNacimiento').val() }, function (data) {
                    $.each(data, function () {
                        $('#codMunicipioNacimiento').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                    });
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener municipios!');
                }); // -- fin obtener municipios
            });

            // ****************************  FIN COMBOS DIRECCION NACIMIENTO *************************************//

            // **************************** COMBOS DIRECCION DOMICILIO *************************************//
            // ----- obtener Paises
            $.getJSON('/pais/getPaises', null, function (data) {
                $.each(data, function () {
                    $('#codPaisDireccion').append('<option value=' +
                        this.codigo + '>' + this.descripcion + '</option>');
                    var paisDirActual = $('#codPaisDireccionActual').text();
                    if (paisDirActual != "") {
                        $('#codPaisDireccion').find('option[value=' + paisDirActual + ']').attr('selected', 'selected');
                    }
                });
                // ----- obtener Departamentos
                $.getJSON('/EstadoDepartamento/getDepartamentoxPais', { codPais: $('#codPaisDireccion').val() }, function (data) {
                    $.each(data, function () {
                        $('#codDepartamentoDireccion').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                        var deptoDirActual = $('#codDepartamentoDireccionActual').text();
                        if (deptoDirActual != "") {
                            $('#codDepartamentoDireccion').find('option[value=' + deptoDirActual + ']').attr('selected', 'selected');
                        }
                    });
                    // ----- obtener municipio
                    $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisDireccion').val(), codDepto: $('#codDepartamentoDireccion').val() }, function (data) {
                        $.each(data, function () {
                            $('#codMunicipioDireccion').append('<option value=' +
                                this.codigo + '>' + this.descripcion + '</option>');
                            var muniDirActual = $('#codMunicipioDireccionActual').text();
                            if (muniDirActual != "") {
                                $('#codMunicipioDireccion').find('option[value=' + muniDirActual + ']').attr('selected', 'selected');
                            }

                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error al obtener municipios!');
                    }); // -- fin obtener municipios
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener departamentos');
                });
            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error al obtener paises!');
            });
            // ------ fin de carga inicial ------------------------------

            // ------ obtener departamentos cuando el pais cambie
            $('#codPaisDireccion').change(function () {
                $('#codDepartamentoDireccion option').remove();
                $.getJSON('/EstadoDepartamento/getDepartamentoxPais', { codPais: $('#codPaisDireccion').val() }, function (data) {
                    $.each(data, function () {
                        $('#codDepartamentoDireccion').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                    });
                    $('#codMunicipioDireccion option').remove();
                    // ----- obtener municipios por departamento
                    $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisDireccion').val(), codDepto: $('#codDepartamentoDireccion').val() }, function (data) {
                        $.each(data, function () {
                            $('#codMunicipioDireccion').append('<option value=' +
                                this.codigo + '>' + this.descripcion + '</option>');
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert('Error al obtener municipios!');
                    }); // -- fin obtener departamentos
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener departamentos');
                });
            });

            // ------ obtener municipio cuando el departamento cambie
            $('#codDepartamentoDireccion').change(function () {
                $('#codMunicipioDireccion option').remove();
                $.getJSON('/municipio/getMunicipioxDepartamento', { codPais: $('#codPaisDireccion').val(), codDepto: $('#codDepartamentoDireccion').val() }, function (data) {
                    $.each(data, function () {
                        $('#codMunicipioDireccion').append('<option value=' +
                            this.codigo + '>' + this.descripcion + '</option>');
                    });
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error al obtener municipios!');
                }); // -- fin obtener municipios
            });

            // ****************************  FIN COMBOS DIRECCION DOMICILIO *************************************//

            // -- valor cuando carga el combo enfermedad cronica
            $(function () {
                var enfermo = $('#tieneEnfermedadCronica').val();
                if (enfermo == 'N') {
                    $('#enfermedadCronica').prop("disabled", true);
                    $('#enfermedadCronica').prop("value", '');
                } else {
                    $('#enfermedadCronica').prop("disabled", false);
                }

            });


            // -- valor cuando cambia el combo enfermedad cronica
            $('#tieneEnfermedadCronica').change(function () {
                var enfermo = $('#tieneEnfermedadCronica').val();
                if (enfermo == 'N') {
                    $('#enfermedadCronica').prop("disabled", true);
                    $('#enfermedadCronica').prop("value", '');
                } else {
                    $('#enfermedadCronica').prop("disabled", false);
                }

            });

            //  -- calendarios y seleccionar genero al editar
            $(function () {
                var generoActual = $('#codGeneroActual').text();
                $('#genero').find('option[value=' + generoActual + ']').attr('selected', 'selected');
            });


        });
    </script>
}

